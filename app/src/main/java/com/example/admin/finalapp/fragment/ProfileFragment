package com.example.admin.finalapp.fragment;


import android.app.AlertDialog;
import android.app.DialogFragment;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Toast;

import com.example.admin.finalapp.activity.R;
import com.example.admin.finalapp.database.SqliteHelper;
import com.example.admin.finalapp.model.User;
import com.example.admin.finalapp.util.Constants;
import com.example.admin.finalapp.util.DateFormate;
import com.example.admin.finalapp.util.PrefUtil;

import java.io.ByteArrayOutputStream;
import java.io.File;

import static android.Manifest.permission.CAMERA;
import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.app.Activity.RESULT_OK;
import static com.facebook.FacebookSdk.getApplicationContext;


/**
 * A simple {@link Fragment} subclass.
 */
public class ProfileFragment extends Fragment implements View.OnClickListener, RadioGroup.OnCheckedChangeListener {


    String TAG = getClass().getSimpleName();
    private ImageView profile_pic;
    private EditText et_first_name;
    private EditText et_last_name;
    private EditText et_email;
    private EditText et_mobile;
    private Button btn_done;
    private RadioGroup radio_group;
    private ImageButton img_calender;
    private EditText et_birth_date;
    String gender = "Male";
    private boolean isRight;
    RadioButton radioMale, radioFeMale;
    private String BirthDate,FirstName,LastName,Email,Mobile,Gender;
    User user;
    SqliteHelper helper;

    boolean flag = false;
    Bitmap yourSelectedImage;
    private Bitmap bitmap;

    public ProfileFragment() {
        // Required empty public constructor
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_profile, container, false);

        helper = new SqliteHelper(getContext());

        profile_pic = (ImageView) view.findViewById(R.id.profile_icon);
        et_first_name = (EditText) view.findViewById(R.id.et_first_name);
        et_last_name = (EditText) view.findViewById(R.id.et_last_name);
        et_email = (EditText) view.findViewById(R.id.et_email);
        et_mobile = (EditText) view.findViewById(R.id.et_mobile);
        et_birth_date = (EditText) view.findViewById(R.id.et_birthDate);
        img_calender = (ImageButton) view.findViewById(R.id.image_calender);
        radio_group = (RadioGroup) view.findViewById(R.id.radio_group);
        btn_done = (Button) view.findViewById(R.id.btn_done);
        radioMale = (RadioButton) view.findViewById(R.id.male);
        radioFeMale = (RadioButton) view.findViewById(R.id.female);

        getData();
        setData();
//        profile_pic.setOnClickListener(this);
        radio_group.setOnCheckedChangeListener(this);
        img_calender.setOnClickListener(this);
        btn_done.setOnClickListener(this);
        profile_pic.setOnClickListener(this);
        condition();
        return view;

    }

    @Override
    public void onClick(View view) {

        if (view.getId() == R.id.btn_done) {
            getTextValues();

            if (!user.getPhone().isEmpty()){
                getTextValues();

                user.setFirstName(FirstName);
                user.setLastName(LastName);
                user.setEmailId(Email);
                //user.setPhone(Mobile);
                user.setBirthDate(BirthDate);
                user.setGender(Gender);
                Bitmap bitmapImage = ((BitmapDrawable) profile_pic.getDrawable()).getBitmap();
                encodeToBase64(bitmapImage, Bitmap.CompressFormat.JPEG,100);

                helper.updateProfile("user_phone",et_mobile.getText().toString(),user);
//                notifyAll();
            }else if (!user.getEmailId().isEmpty()){
                user.setFirstName(FirstName);
                user.setLastName(LastName);
                //user.setEmailId(Email);
                user.setPhone(Mobile);
                user.setBirthDate(BirthDate);
                user.setGender(Gender);

                Bitmap bitmapImage = ((BitmapDrawable) profile_pic.getDrawable()).getBitmap();
                encodeToBase64(bitmapImage, Bitmap.CompressFormat.JPEG,100);
                helper.updateProfile("user_emailId",et_email.getText().toString(),user);
            }

        }else if (view.getId() == R.id.image_calender){
            DialogFragment dialogFragment = new DateFormate();
            dialogFragment.show(getActivity().getFragmentManager(), "DatePicker");


        }else if (view.getId() == R.id.profile_icon){
            selectImage();
        }
    }


    void getTextValues(){

        FirstName = et_first_name.getText().toString();
        LastName = et_last_name.getText().toString();
        Email = et_email.getText().toString();
        Mobile = et_mobile.getText().toString();
        BirthDate = et_birth_date.getText().toString();
        Gender = gender;
    }

    void getData(){
        String userId = PrefUtil.getstringPref(Constants.data, getContext());
        Log.i(TAG, "condition: " + userId);

        if (userId.matches("\\d+(?:\\.\\d+)?")) {
            user = helper.getMobileData(userId);
        } else {
            user = helper.getEmailData(userId);
        }
    }
    void setData(){
        et_first_name.setText(user.getFirstName());
        et_last_name.setText(user.getLastName());
        et_email.setText(user.getEmailId());
        et_mobile.setText(user.getPhone());
        et_birth_date.setText(user.getBirthDate());
        if (user.getProfilePhoto() != null){
            bitmap =decodeBase64(user.getProfilePhoto());
        }else {
            profile_pic.setImageResource(R.drawable.user);
        }

        profile_pic.setImageBitmap(bitmap);
        if (user.getGender() != null ) {
            if (user.getGender().equals("Male")) {
                setRadioButton(true, false);
            } else if (user.getGender().equals("Female")) {
                setRadioButton(false, true);
            }
        }

    }
    void condition(){
        getTextValues();
        if (!Email.isEmpty() && !Mobile.isEmpty()){
            et_email.setEnabled(false);
            et_email.setTextColor(getResources().getColor(R.color.pink));
            et_mobile.setEnabled(false);
            et_mobile.setTextColor(getResources().getColor(R.color.pink));
        }else if (!Email.isEmpty()){
            et_email.setEnabled(false);
            et_email.setTextColor(getResources().getColor(R.color.pink));
        }else if (!Mobile.isEmpty()){
            et_mobile.setEnabled(false);
            et_mobile.setTextColor(getResources().getColor(R.color.pink));
        }

    }
    @Override
    public void onCheckedChanged(RadioGroup radioGroup, int i) {
        switch (i)
        {
            case R.id.male :
                gender= "Male";
                break;
            case R.id.female :
                gender= "Female";
                break;
        }
    }
    void setRadioButton(Boolean isMale, Boolean isFeMale){
        if (isMale)
        {
            radioMale.setChecked(true);
        } else if (isFeMale)
        {
            radioFeMale.setChecked(true);
        }
    }
    private void selectImage() {
        final CharSequence[] items = {"Take Photo", "Choose from Gallary", "Cancel"};

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setTitle("Add Photo!");
        builder.setItems(items, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int item) {
                if (items[item].equals("Take Photo")) {
                    if (checkPermission()) {
                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                        startActivityForResult(intent, 1);
                    }else {
                        requestPermission();
                    }
                } else if (items[item].equals("Choose from Gallary")) {
                    Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                    intent.setType("image/*");
                    startActivityForResult(Intent.createChooser(intent, "Select File"), 0);
                } else if (items[item].equals("Cancel")) {
                    dialog.dismiss();
                }
            }
        });
        builder.show();
    }
    public static  String encodeToBase64(Bitmap image,Bitmap.CompressFormat compressFormat,int quality)
    {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        image.compress(compressFormat,quality,byteArrayOutputStream);
        return Base64.encodeToString(byteArrayOutputStream.toByteArray(), Base64.DEFAULT);
    }
    public static Bitmap decodeBase64(String input)
    {
        byte[] decoBytes = Base64.decode(input,0);
        return BitmapFactory.decodeByteArray(decoBytes,0,decoBytes.length);
    }
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        Log.e("requestCode", requestCode + " test");
        switch (requestCode) {
            case 0:

                if (resultCode == RESULT_OK) {
                    Uri selectedImage = data.getData();
                    String[] filePathColumn = {MediaStore.Images.Media.DATA};

                    Cursor cursor = getActivity().getContentResolver().query(selectedImage,
                            filePathColumn, null, null, null);
                    cursor.moveToFirst();

                    int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
                    String filePath = cursor.getString(columnIndex);

                    cursor.close();
                    // Convert file path into bitmap image using below line.
                    yourSelectedImage = BitmapFactory.decodeFile(new File(filePath).getAbsolutePath());
                    profile_pic.setImageBitmap(yourSelectedImage);
                    Log.e("State", filePath + "_test");
                    flag = true;
                    btn_done.setEnabled(true);
                }
                break;
            case 1:
                if (resultCode == RESULT_OK) {
                    if (requestCode == 1) {
                        Bitmap imgurl = (Bitmap) data.getExtras().get("data");
                        profile_pic.setImageBitmap(imgurl);
                        flag = true;
                        btn_done.setEnabled(true);
                    }
                }
        }

    }

    private boolean checkPermission() {
        int result = ContextCompat.checkSelfPermission(getApplicationContext(), CAMERA);
        int result2 = ContextCompat.checkSelfPermission(getApplicationContext(), READ_EXTERNAL_STORAGE);
        return result == PackageManager.PERMISSION_GRANTED && result2 == PackageManager.PERMISSION_GRANTED;
    }

    private void requestPermission() {

        ActivityCompat.requestPermissions(getActivity(), new String[]{CAMERA,READ_EXTERNAL_STORAGE}, 200);

    }
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode) {
            case 200:
                if (grantResults.length > 0) {

                    boolean cameraAccepted = grantResults[0] == PackageManager.PERMISSION_GRANTED;
                    boolean ReadExternalAccepted = grantResults[1] == PackageManager.PERMISSION_GRANTED;

                    if (cameraAccepted) {
                        /*Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                        startActivityForResult(intent, 1);*/
                    }
                    else if (ReadExternalAccepted){
                        /*Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                        intent.setType("image*//*");
                        startActivityForResult(Intent.createChooser(intent, "Select File"), 0);*/
                    }
                    else {
                        Toast.makeText(getActivity(), "App need camera permission for capture image.", Toast.LENGTH_SHORT).show();
                    }
                }

                break;
        }
    }

}
